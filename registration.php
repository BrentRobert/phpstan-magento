<?php

/*
 * This file is part of the phpstan-magento package.
 *
 * (c) bitExpert AG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace PHPStan\Broker;

use bitExpert\PHPStan\Magento\Autoload\Autoloader;

/**
 * Register given function as __autoload() implementation.
 *
 * @param callable $autoload_function
 * @param bool $throw
 * @param bool $prepend
 * @return bool
 */
function spl_autoload_register(callable $autoload_function, bool $throw = true, bool $prepend = false): bool
{
    // goal: convince PHPStan that classes generated by Magento - namely Factory & Proxy classes exists even when
    // they are not generated. When running PHPStan in a Magento application this is not a problem at all as Magento
    // will generate those files. When running PHPStan on a isolated Magento module codebase this is indeed a problem
    // as we don't have the Magento tooling in place to generate those classes.
    return \spl_autoload_register($autoload_function, $throw, $prepend) && Autoloader::register();
}

/**
 * Unregister given function as __autoload() implementation.
 *
 * @param $autoload_function
 * @return bool
 */
function spl_autoload_unregister($autoload_function) : bool
{
    // similar to the handling in PHPStan's Broker class unregister the custom autoloaders again so that we can make
    // sure our autoloaders will always run as the last ones making sure that potential existing factories & proxies
    // can be loaded through Standard Composer autoloading means...
    return \spl_autoload_unregister($autoload_function) && Autoloader::unregister();
}
